{"/home/travis/build/npmtest/node-npmtest-edge/test.js":"/* istanbul instrument in package npmtest_edge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-edge/lib.npmtest_edge.js":"/* istanbul instrument in package npmtest_edge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_edge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_edge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-edge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-edge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_edge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_edge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_edge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_edge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_edge.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_edge.__dirname +\n                    '/lib.npmtest_edge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/lib/edge.js":"var fs = require('fs')\n    , path = require('path')\n    , builtEdge = path.resolve(__dirname, '../build/Release/' + (process.env.EDGE_USE_CORECLR || !fs.existsSync(path.resolve(__dirname, '../build/Release/edge_nativeclr.node')) ? 'edge_coreclr.node' : 'edge_nativeclr.node'))\n    , edge;\n\nvar versionMap = [\n    [ /^0\\.8\\./, '0.8.22' ],\n    [ /^0\\.10\\./, '0.10.0' ],\n    [ /^0\\.12\\./, '0.12.0' ],\n    [ /^4\\./, '4.1.1' ],\n    [ /^5\\./, '5.1.0' ],\n    [ /^6\\./, '6.4.0' ],\n];\n\nfunction determineVersion() {\n    for (var i in versionMap) {\n        if (process.versions.node.match(versionMap[i][0])) {\n            return versionMap[i][1];\n        }\n    }\n\n    throw new Error('The edge module has not been pre-compiled for node.js version ' + process.version +\n        '. You must build a custom version of edge.node. Please refer to https://github.com/tjanczuk/edge ' +\n        'for building instructions.');\n}\nvar edgeNative;\nif (process.env.EDGE_NATIVE) {\n    edgeNative = process.env.EDGE_NATIVE;\n}\nelse if (fs.existsSync(builtEdge)) {\n    edgeNative = builtEdge;\n}\nelse if (process.platform === 'win32') {\n    edgeNative = path.resolve(__dirname, './native/' + process.platform + '/' + process.arch + '/' + determineVersion() + '/' + (process.env.EDGE_USE_CORECLR ? 'edge_coreclr' : 'edge_nativeclr'));\n}\nelse {\n    throw new Error('The edge native module is not available at ' + builtEdge \n        + '. You can use EDGE_NATIVE environment variable to provide alternate location of edge.node. '\n        + 'If you need to build edge.node, follow build instructions for your platform at https://github.com/tjanczuk/edge');\n}\nif (process.env.EDGE_DEBUG) {\n    console.log('Load edge native library from: ' + edgeNative);\n}\nif (edgeNative.match(/edge_coreclr\\.node$/i)) {\n    // Propagate the choice between desktop and coreclr to edge-cs; this is used in deciding\n    // how to compile literal C# at https://github.com/tjanczuk/edge-cs/blob/master/lib/edge-cs.js\n    process.env.EDGE_USE_CORECLR = 1;\n}\nif (process.env.EDGE_USE_CORECLR && !process.env.EDGE_BOOTSTRAP_DIR && fs.existsSync(path.join(__dirname, 'bootstrap', 'bin', 'Release', 'netcoreapp1.0', 'bootstrap.dll'))) {\n    process.env.EDGE_BOOTSTRAP_DIR = path.join(__dirname, 'bootstrap', 'bin', 'Release', 'netcoreapp1.0');\n}\n\nprocess.env.EDGE_NATIVE = edgeNative;\nedge = require(edgeNative);\n\nexports.func = function(language, options) {\n    if (!options) {\n        options = language;\n        language = 'cs';\n    }\n\n    if (typeof options === 'string') {\n        if (options.match(/\\.dll$/i)) {\n            options = { assemblyFile: options };\n        }\n        else {\n            options = { source: options };\n        }\n    }\n    else if (typeof options === 'function') {\n        var originalPrepareStackTrace = Error.prepareStackTrace;\n        var stack;\n        try {\n            Error.prepareStackTrace = function(error, stack) {\n                return stack;\n            };\n            stack = new Error().stack;\n        }\n        finally\n        {\n            Error.prepareStackTrace = originalPrepareStackTrace;\n        }\n        \n        options = { source: options, jsFileName: stack[1].getFileName(), jsLineNumber: stack[1].getLineNumber() };\n    }\n    else if (typeof options !== 'object') {\n        throw new Error('Specify the source code as string or provide an options object.');\n    }\n\n    if (typeof language !== 'string') {\n        throw new Error('The first argument must be a string identifying the language compiler to use.');\n    }\n    else if (!options.assemblyFile) {\n        var compilerName = 'edge-' + language.toLowerCase();\n        var compiler;\n        try {\n            compiler = require(compilerName);\n        }\n        catch (e) {\n            throw new Error(\"Unsupported language '\" + language + \"'. To compile script in language '\" + language +\n                \"' an npm module '\" + compilerName + \"' must be installed.\");\n        }\n\n        try {\n            options.compiler = compiler.getCompiler();\n        }\n        catch (e) {\n            throw new Error(\"The '\" + compilerName + \"' module required to compile the '\" + language + \"' language \" +\n                \"does not contain getCompiler() function.\");\n        }\n\n        if (typeof options.compiler !== 'string') {\n            throw new Error(\"The '\" + compilerName + \"' module required to compile the '\" + language + \"' language \" +\n                \"did not specify correct compiler package name or assembly.\");\n        }\n\n        if (process.env.EDGE_USE_CORECLR) {\n            options.bootstrapDependencyManifest = compiler.getBootstrapDependencyManifest();\n        }\n    }\n\n    if (!options.assemblyFile && !options.source) {\n        throw new Error('Provide DLL or source file name or .NET script literal as a string parmeter, or specify an options object '+\n            'with assemblyFile or source string property.');\n    }\n    else if (options.assemblyFile && options.source) {\n        throw new Error('Provide either an asseblyFile or source property, but not both.');\n    }\n\n    if (typeof options.source === 'function') {\n        var match = options.source.toString().match(/[^]*\\/\\*([^]*)\\*\\/\\s*\\}$/);\n        if (match) {\n            options.source = match[1];\n        }\n        else {\n            throw new Error('If .NET source is provided as JavaScript function, function body must be a /* ... */ comment.');\n        }\n    }\n\n    if (options.references !== undefined) {\n        if (!Array.isArray(options.references)) {\n            throw new Error('The references property must be an array of strings.');\n        }\n\n        options.references.forEach(function (ref) {\n            if (typeof ref !== 'string') {\n                throw new Error('The references property must be an array of strings.');\n            }\n        });\n    }\n\n    if (options.assemblyFile) {\n        if (!options.typeName) {\n            var matched = options.assemblyFile.match(/([^\\\\\\/]+)\\.dll$/i);\n            if (!matched) {\n                throw new Error('Unable to determine the namespace name based on assembly file name. ' +\n                    'Specify typeName parameter as a namespace qualified CLR type name of the application class.');\n            }\n\n            options.typeName = matched[1] + '.Startup';\n        }\n    }\n    else if (!options.typeName) {\n        options.typeName = \"Startup\";\n    }\n\n    if (!options.methodName) {\n        options.methodName = 'Invoke';\n    }\n\n    return edge.initializeClrFunc(options);\n};\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/lib/double_edge.js":"// Fix #176 for GUI applications on Windows\ntry {\n    var stdout = process.stdout;\n}\ncatch (e) {\n    // This is a Windows GUI application without stdout and stderr defined.\n    // Define process.stdout and process.stderr so that all output is discarded. \n    (function () {\n        var stream = require('stream');\n        var NullStream = function (o) {\n            stream.Writable.call(this);\n            this._write = function (c, e, cb) { cb && cb(); };\n        }\n        require('util').inherits(NullStream, stream.Writable);\n        var nullStream = new NullStream();\n        process.__defineGetter__('stdout', function () { return nullStream; });\n        process.__defineGetter__('stderr', function () { return nullStream; });\n    })();\n}\n\nprocess.env['EDGE_NATIVE'] = process.env['EDGE_NATIVE'] ||\n    __dirname + (process.arch === 'x64' ? '\\\\x64\\\\edge_nativeclr.node' : '\\\\x86\\\\edge_nativeclr.node');\n\nvar edge = require('./edge.js');\n\nvar initialize = edge.func({\n    assemblyFile: __dirname + '\\\\..\\\\EdgeJs.dll',\n    typeName: 'EdgeJs.Edge',\n    methodName: 'InitializeInternal'\n});\n\nvar compileFunc = function (data, callback) {\n    var wrapper = '(function () { ' + data + ' })';\n    var funcFactory = eval(wrapper);\n    var func = funcFactory();\n    if (typeof func !== 'function') {\n        throw new Error('Node.js code must return an instance of a JavaScript function. '\n            + 'Please use `return` statement to return a function.');\n    }\n\n    callback(null, func);\n};\n\ninitialize(compileFunc, function (error, data) {\n    if (error) throw error;\n});\n\n// prevent the V8 thread from exiting for the lifetime of the CLR application\nsetInterval(function () {}, 3600000); \n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/performance/latency.js":"function help() {\n    console.log('Usage: node latency.js i|x <N>');\n    console.log('   i - 1 compilation, in-process loop of N calls');\n    console.log('   c - in-process loop of N compilations and calls');\n    console.log('   x - child process loop of N iterations');\n    console.log('e.g. node latency.js i 1000');\n    process.exit(1);    \n}\n\nif (process.argv.length !== 4)\n    help();\n\nif (isNaN(process.argv[3]))\n    help();\n\nvar N = +process.argv[3];\n\nif (N < 1)\n    help();\n\nif (process.argv[2] === 'i') {\n    var func = require('../lib/edge').func(function () {/*\n        async (input) => {\n            return \".NET welcomes \" + input.ToString();\n        }\n    */});\n    var M = N;\n    var start = Date.now();\n    one_i();\n    function one_i() {\n        func('Node.js', function (error, result) {\n            if (error) throw error;\n            if (--M <= 0) {\n                var delta = Date.now() - start;\n                console.log(delta, delta / N);\n            }\n            else \n                setImmediate(one_i);\n        });\n    }\n}else if (process.argv[2] === 'c') {\n    var csharp = 'async (input) => { return \".NET welcomes \" + input.ToString(); } /*';\n\n    var edge = require('../lib/edge');\n    var M = N;\n    var start = Date.now();\n    one_c();\n    function one_c() {\n        var code = csharp + M +  '*/'; // force cache miss and recompile\n        var func = edge.func(code);\n        func('Node.js', function (error, result) {\n            if (error) throw error;\n            if (--M <= 0) {\n                var delta = Date.now() - start;\n                console.log(delta, delta / N);\n            }\n            else \n                setImmediate(one_c);\n        });\n    }\n}\nelse if (process.argv[2] === 'x') {\n    var child_process = require('child_process');\n    var cmd = [process.argv[0], process.argv[1], 'i', '1'].join(' ');\n    var M = N;\n    var start = Date.now();\n    one_x();\n    function one_x() {\n        child_process.exec(cmd, function (error) {\n            if (error) throw error;\n            if (--M <= 0) {\n                var delta = Date.now() - start;\n                console.log(delta, delta / N);\n            }\n            else \n                setImmediate(one_x);\n        });\n    }\n}\nelse\n    help();\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/performance/marshal_clr2v8.js":"var path = require('path');\n\nvar callCount = process.env.EDGE_CALL_COUNT || 10000;\nvar edgePerformanceDll = path.join(__dirname, 'Edge.Performance.dll');\n\nvar measure = function (func) {\n\tvar start = Date.now();\n\tvar i = 0;\n\n\tfunction one() {\n\t\tfunc({\n\t\t\ttitle: 'Run .NET and node.js in-process with edge.js',\n\t\t\tauthor: {\n\t\t\t\tfirst: 'Tomasz',\n\t\t\t\tlast: 'Janczuk'\n\t\t\t},\n\t\t\tyear: 2013,\n\t\t\tprice: 24.99,\n\t\t\tavailable: true, \n\t\t\tdescription: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus posuere tincidunt felis, et mattis mauris ultrices quis. Cras molestie, quam varius tincidunt tincidunt, mi magna imperdiet lacus, quis elementum ante nibh quis orci. In posuere erat sed tellus lacinia luctus. Praesent sodales tellus mauris, et egestas justo. In blandit, metus non congue adipiscing, est orci luctus odio, non sagittis erat orci ac sapien. Proin ut est id enim mattis volutpat. Vivamus ultrices dapibus feugiat. In dictum tincidunt eros, non pretium nisi rhoncus in. Duis a lacus et elit feugiat ullamcorper. Mauris tempor turpis nulla. Nullam nec facilisis elit.',\n\t\t\tpicture: new Buffer(16000),\n\t\t\ttags: [ '.NET', 'node.js', 'CLR', 'V8', 'interop']\t\t\t\n\t\t}, function (error, callbck) {\n\t\t\tif (error) throw error;\n\t\t\tif (++i < callCount) setImmediate(one);\n\t\t\telse finish();\n\t\t});\n\t}\n\n\tfunction finish() {\n\t\tvar delta = Date.now() - start;\n\t\tvar result = process.memoryUsage();\n\t\tresult.latency = delta / callCount;\n\t\tconsole.log(result);\n\t}\n\n\tone();\n};\n\nvar baseline = function () {\n\tmeasure(function (input, callback) {\n\t\tvar book = {\n\t\t\ttitle: 'Run .NET and node.js in-process with edge.js',\n\t\t\tauthor: {\n\t\t\t\tfirst: 'Tomasz',\n\t\t\t\tlast: 'Janczuk'\n\t\t\t},\n\t\t\tyear: 2013,\n\t\t\tprice: 24.99,\n\t\t\tavailable: true, \n\t\t\tdescription: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus posuere tincidunt felis, et mattis mauris ultrices quis. Cras molestie, quam varius tincidunt tincidunt, mi magna imperdiet lacus, quis elementum ante nibh quis orci. In posuere erat sed tellus lacinia luctus. Praesent sodales tellus mauris, et egestas justo. In blandit, metus non congue adipiscing, est orci luctus odio, non sagittis erat orci ac sapien. Proin ut est id enim mattis volutpat. Vivamus ultrices dapibus feugiat. In dictum tincidunt eros, non pretium nisi rhoncus in. Duis a lacus et elit feugiat ullamcorper. Mauris tempor turpis nulla. Nullam nec facilisis elit.',\n\t\t\tpicture: new Buffer(16000),\n\t\t\ttags: [ '.NET', 'node.js', 'CLR', 'V8', 'interop']\t\t\t\n\t\t}\n\t\tcallback(null, book);\n\t});\n};\n\nvar clr2v8 = function () {\n\tmeasure(require('../lib/edge').func({\n\t\tassemblyFile: edgePerformanceDll,\n\t\tmethodName: 'Invoke'\n\t}));\n};\n\nvar crossProcess = function () {\n\tvar http = require('http');\n\tmeasure(function (input, callback) {\n\t\thttp.get(\"http://localhost:31415/api/book\", function(res) {\n\t\t\tif (res.statusCode !== 200) {\n\t\t\t\treturn callback(new Error('Status code: ' + res.statusCode));\n\t\t\t}\n\n\t\t\tvar body = '';\n\t\t\tres.on('data', function (chunk) { body += chunk; });\n\t\t\tres.on('end', function () {\n\t\t\t\tcallback(null, JSON.parse(body));\n\t\t\t})\n\t\t}).on('error', callback);\n\t});\n};\n\nvar cases = {\n\tjs: baseline,\n\tedge: clr2v8,\n\txproc: crossProcess\n};\n\nif (!cases[process.argv[2]]) {\n\tconsole.log('Usage: marshal_clr2v8.js ' + Object.getOwnPropertyNames(cases).join('|'));\n\tprocess.exit(1);\n}\nelse {\n\tcases[process.argv[2]]();\n}\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/101_hello_lambda.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func('async (input) => { return \".NET welcomes \" + input.ToString(); }');\n\nhello('Node.js', function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge-cs/lib/edge-cs.js":"var path = require('path');\r\n\r\nexports.getCompiler = function () {\r\n\treturn process.env.EDGE_CS_NATIVE || (process.env.EDGE_USE_CORECLR ? 'Edge.js.CSharp' : path.join(__dirname, 'edge-cs.dll'));\r\n};\r\n\r\nexports.getBootstrapDependencyManifest = function() {\r\n\treturn path.join(__dirname, 'bootstrap', 'bin', 'Release', 'netstandard1.6', 'bootstrap.deps.json');\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/102_hello_function.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func(function () {/*\n\tasync (input) => \n\t{ \n\t\treturn \".NET welcomes \" + input.ToString(); \n\t}\n*/});\n\nhello('Node.js', function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/103_hello_file.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func('103_hello_file.csx');\n\nhello('Node.js', function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/104_add7_class.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar add7 = edge.func(function () {/*\n\tusing System.Threading.Tasks;\n\n\tpublic class Startup\n\t{\n\t\tpublic async Task<object> Invoke(object input)\n\t\t{\n\t\t\treturn this.Add7((int)input);\n\t\t}\n\n\t\tint Add7(int v) \n\t\t{\n\t\t\treturn Helper.Add7(v);\n\t\t}\n\t}\n\n\tstatic class Helper\n\t{\n\t\tpublic static int Add7(int v)\n\t\t{\n\t\t\treturn v + 7;\n\t\t}\n\t}\n*/});\n\nadd7(12, function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/105_add7_dll.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\n// Compile Sample105.dll with\n// - on Windows (.NET Framework):\n//      csc.exe /target:library /debug Sample105.cs\n// - on MacOS/Linux (Mono):\n//      mcs -sdk:4.5 Sample105.cs -target:library\n\nvar edge = require('../lib/edge');\n\nvar add7 = edge.func('Sample105.dll');\n\nadd7(12, function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/106_marshal_v82clr.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func(function () {/*\n\tusing System.Collections.Generic;\n\n\tasync (data) =>\n\t{\n\t\tConsole.WriteLine(\"-----> In .NET:\");\n\t\tforeach (var kv in (IDictionary<string,object>)data)\n\t\t{\n\t\t\tConsole.WriteLine(kv.Key + \": \" + kv.Value.GetType());\n\t\t}\n\n\t\treturn null;\n\t}\n*/});\n\nvar payload = {\n\tanInteger: 1,\n\taNumber: 3.1415,\n\taString: 'foobar',\n\taBool: true,\n\tanObject: {},\n\tanArray: [ 'a', 1, true ],\n\taBuffer: new Buffer(1024)\n}\n\nconsole.log('-----> In node.js:');\nconsole.log(payload);\n\nhello(payload, function (error, result) {\n\tif (error) throw error;\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/107_marshal_clr2v8.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func(function () {/*\n\tasync (input) => \n\t{\n\t\tvar result = new {\n\t\t\tanInteger = 1,\n\t\t\taNumber = 3.1415,\n\t\t\taString = \"foobar\",\n\t\t\taBool = true,\n\t\t\tanObject = new { a = \"b\", c = 12 },\n\t\t\tanArray = new object[] { \"a\", 1, true },\n\t\t\taBuffer = new byte[1024]\n\t\t};\n\n\t\treturn result;\n\t}\n*/});\n\nhello(null, function (error, result) {\n\tif (error) throw error;\n\tconsole.log('-----> In node.js:');\n\tconsole.log(result);\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/108_func.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar addAndMultiplyBy2 = edge.func(function () {/*\n\tusing System.Collections.Generic;\n\n\tasync (dynamic data) => \t\n\t{\n\t\tint sum = (int)data.a + (int)data.b;\n\t\tvar multiplyBy2 = (Func<object,Task<object>>)data.multiplyBy2;\n\t\treturn await multiplyBy2(sum);\n\t}\n*/});\n\nvar payload = {\n\ta: 2,\n\tb: 3,\n\tmultiplyBy2: function(input, callback) {\n\t\tcallback(null, input * 2);\n\t}\n};\n\naddAndMultiplyBy2(payload, function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/108_lambda.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar createCounter = edge.func(function () {/*\n    async (start) => \n    {\n        var k = (int)start;\n        return (Func<object,Task<object>>)(\n            async (i) => \n            { \n                return k++;\n            }\n        );\n    }\n*/});\n\nvar nextNumber = createCounter(12, true);\nconsole.log(nextNumber(null, true));\nconsole.log(nextNumber(null, true));\nconsole.log(nextNumber(null, true));\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/109_sync.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func('async (input) => { return \".NET welcomes \" + input.ToString(); }');\n\n// call the function synchronously\nvar result = hello('Node.js', true);\nconsole.log(result);\n\n// call the same function asynchronously\nhello('JavaScript', function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/110_clr_instance.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar createPerson = edge.func(function () {/*\n    using System;\n    using System.Threading.Tasks;\n\n    public class Startup\n    {\n        public async Task<object> Invoke(int startingSalary)\n        {\n            var person = new Person(startingSalary);\n            return new {\n                getSalary = (Func<object,Task<object>>)(\n                    async (i) => \n                    { \n                        return person.Salary; \n                    }\n                ),\n                giveRaise = (Func<object,Task<object>>)(\n                    async (amount) => \n                    { \n                        person.GiveRaise((int)amount); \n                        return person.Salary;\n                    }\n                )\n            };\n        }\n    }\n\n    public class Person\n    {\n        public int Salary { get; private set; }\n\n        public Person(int startingSalary)\n        {\n            this.Salary = startingSalary;\n        }\n\n        public void GiveRaise(int amount)\n        {\n            this.Salary += amount;\n        }\n    }\n*/});\n\nvar person = createPerson(120, true);\nconsole.log(person.getSalary(null, true));\nconsole.log(person.giveRaise(20, true));\nconsole.log(person.getSalary(null, true));\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/111_clr_listener.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar createController = edge.func(function () {/*\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n\n    public class Startup\n    {\n        static TaskCompletionSource<object> tcs;\n\n        public async Task<object> Invoke(object input)\n        {\n            return new {\n                yieldControl = (Func<object,Task<object>>)((i) => {\n                    return Startup.AcquireControl();\n                }),\n                regainControl = (Func<object,Task<object>>)(async (i) => {\n                    Startup.ReleaseControl();\n                    return null;\n                })\n            };\n        }\n\n        static Task<object> AcquireControl()\n        {\n            // single threaded; always called on V8 thread\n\n            if (tcs != null)\n            {\n                throw new InvalidOperationException(\"CLR already controls the lifetime of the process.\");\n            }\n\n            TaskCompletionSource<object> tmp = new TaskCompletionSource<object>();\n            tcs = tmp;\n            return tmp.Task;\n        }\n\n        public static void ReleaseControl()\n        {\n            // multi-threaded; can be called from V8 or one of many CLR threads\n\n            TaskCompletionSource<object> tmp = Interlocked.Exchange(ref tcs, null);\n            if (tmp != null)\n            {\n                tmp.SetResult(null);\n            }\n        }\n    }\n*/});\n\n// yield control over process lifetime to CLR\nvar controller = createController(null, true);\ncontroller.yieldControl();\nconsole.log('Control over process lifetime yielded to CLR, the process will not exit...');\n\n// at this point, the process will not exit until one of the following happens:\n// - node.js calls controller.regainControl(), or\n// - CLR calls Startup.ReleaseControl()\n\n// controller.regainControl();","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/201_worker.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar hello = edge.func(function () {/*\n\tasync (input) => \n\t{ \n\t\t// we are on V8 thread here\n\n\t\treturn await Task.Run<object>(async () => {\n\n\t\t\t// we are on CLR thread pool thread here\n\n\t\t\t// simulate long running operation\n\t\t\tawait Task.Delay(5000); \n\t\t\t\n\t\t\treturn \".NET welcomes \" + input.ToString();\n\t\t});\n\t}\n*/});\n\nconsole.log('Starting CPU bound operation...');\nhello('Node.js', function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});\n\nsetInterval(function() {\n\tconsole.log('Node.js event loop is alive');\n}, 1000);\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/202_sql.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar sql = edge.func('202_sql.csx');\n\nsql('select top 2 * from Products', function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/203_x509store.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar listCertificates = edge.func(function() {/*\n    #r \"System.dll\"\n\n    using System.Collections.Generic;\n    using System.Security.Cryptography.X509Certificates;\n\n    async (dynamic data) =>\n    {\n        X509Store store = new X509Store(\n            (string)data.storeName, \n            (StoreLocation)Enum.Parse(typeof(StoreLocation), (string)data.storeLocation));\n        store.Open(OpenFlags.ReadOnly);\n        try\n        {\n            List<string> result = new List<string>();\n            foreach (X509Certificate2 certificate in store.Certificates)\n            {\n                result.Add(certificate.Subject);\n            }\n\n            return result;\n        }\n        finally\n        {\n            store.Close();\n        }\n    }\n*/});\n\nvar result = listCertificates({ storeName: 'My', storeLocation: 'LocalMachine' }, true);\nconsole.log(result);\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/205_soap.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar convertKilograms = edge.func('205_soap.csx');\n\nconvertKilograms(123, function (error, result) {\n\tif (error) throw error;\n\tconsole.log(result);\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/206_registry_read.js":"var edge = require('../lib/edge');\n\nvar readRegistery = edge.func(function () {/*\n\tusing Microsoft.Win32;\n\n\tasync (dynamic input) =>\n\t{\n\t\treturn Registry.GetValue((string) input.keyName, (string) input.valueName, null);\n\t}\n*/});\n\nreadRegistery({\n\tkeyName: 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\MSBuild\\\\4.0', \n\tvalueName: 'MSBuildOverrideTasksPath'\n}, function (err, result) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\tconsole.log(result);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/206_registry_write.js":"var edge = require('../lib/edge');\n\nvar writeRegistery = edge.func(function () {/*\n\tusing Microsoft.Win32;\n\n\tasync (dynamic input) =>\n\t{\n\t\tRegistry.SetValue((string)input.keyName, (string)input.valueName, input.value);\n\t\treturn null;\n\t}\n*/});\n\nwriteRegistery({\n\tkeyName: 'HKEY_CURRENT_USER\\\\Environment', \n\tvalueName: 'MyCustomValue', \n\tvalue: 1050 \n}, function (err) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\tconsole.log('Done!');\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/207_unzip.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge')\n    , path = require('path');\n\nvar unzipDirectory = edge.func(function() {/*\n    #r \"System.IO.Compression.FileSystem.dll\"\n\n    using System.IO.Compression;\n\n    async (dynamic input) =>\n    {\n        await Task.Run(async () => {\n            ZipFile.ExtractToDirectory((string)input.source, (string)input.destination);\n        });\n\n        return null;\n    }\n*/});\n\nvar params = { \n    source: path.join(__dirname, '..', 'samples.zip'), \n    destination: path.join(__dirname, '..', 'samples_tmp')\n};\n\nunzipDirectory(params, function (error) {\n    if (error) throw error;\n    console.log('The ..\\\\samples.zip archive has been decompressed to ..\\\\samples_tmp directory.');\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/207_zip.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge')\n    , path = require('path');\n\nvar zipDirectory = edge.func(function() {/*\n    #r \"System.IO.Compression.FileSystem.dll\"\n\n    using System.IO.Compression;\n\n    async (dynamic input) =>\n    {\n        await Task.Run(async () => {\n            ZipFile.CreateFromDirectory((string)input.source, (string)input.destination);\n        });\n\n        return null;\n    }\n*/});\n\nvar params = { \n    source: path.join(__dirname, '..', 'samples'), \n    destination: path.join(__dirname, '..', 'samples.zip') \n};\n\nzipDirectory(params, function (error) {\n    if (error) throw error;\n    console.log('The samples directory has been compressed to ..\\\\samples.zip file.');\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/208_convertImage.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge')\n    , path = require('path');\n\nvar convertImage = edge.func(function() {/*\n    #r \"System.Drawing.dll\"\n\n    using System;\n    using System.Threading.Tasks;\n    using System.Collections.Generic;\n    using System.Drawing;\n    using System.Drawing.Imaging;\n\n    class Startup\n    {\n        static IDictionary<string, ImageFormat> formats = new Dictionary<string, ImageFormat> \n        {\n            { \"jpg\", ImageFormat.Jpeg },\n            { \"bmp\", ImageFormat.Bmp },\n            { \"gif\", ImageFormat.Gif },\n            { \"tiff\", ImageFormat.Tiff },\n            { \"png\", ImageFormat.Png }\n        };\n\n        public async Task<object> Invoke(IDictionary<string,object> input)\n        {\n            await Task.Run(async () => {\n                using (Image image = Image.FromFile((string)input[\"source\"]))\n                {\n                    image.Save((string)input[\"destination\"], formats[(string)input[\"toType\"]]);\n                }\n            });\n\n            return null;\n        }\n    }\n*/});\n\nvar params = { \n    source: path.join(__dirname, 'edge.png'), \n    destination: path.join(__dirname, 'edge.jpg'),\n    toType: 'jpg'\n};\n\nconvertImage(params, function (error) {\n    if (error) throw error;\n    console.log('The edge.png has been asynchronously converted to edge.jpg.');\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/209_websocket.js":"// Overview of edge.js: http://tjanczuk.github.io/edge\n\n// This sample shows using Node.js to expose WebSocket protocol to .NET applications.\n// It works whenever you can run Node.js and .NET Framework 4.5, including\n// Windows Server 2008 and Windows 7 which do not offer native WebSocket support.\n\nvar http = require('http')\n    , edge = require('../lib/edge')\n    , WebSocketServer = require('ws').Server; // npm install ws\n\n// The createMyNetWebSocket function creates an instance of MyNetWebSocket\n// class in .NET to handle a single WebSocket connection that Node.js accepted.\n// The createMyNetWebSocket function takes a single parameter - a JavaScript function .NET code \n// can call to send a WebSocket message to the client over the WebSocket connection. \n// The createMyNetWebSocket function returns a single value - a .NET function Node.js\n// code should call whenever a WebSocket message is received from the client.\n\nvar createMyNetWebSocket = edge.func(function () {/*\n    using System;\n    using System.Threading.Tasks;\n\n    // The NetWebSocket class is an adapter between the prescriptive interop model\n    // Edge.js provides and a usable .NET APIs of ReceiveAsync and SendAsync. \n\n    public abstract class NetWebSocket\n    {\n        Func<object,Task<object>> SendImpl { get; set; }\n\n        public Func<object,Task<object>> ReceiveImpl \n        {\n            get \n            {\n                return async (input) => \n                {\n                    await this.ReceiveAsync((string)input);\n                    return Task.FromResult<object>(null);\n                };\n            }\n        }\n\n        public NetWebSocket(Func<object,Task<object>> sendImpl) {\n            this.SendImpl = sendImpl;\n        }\n\n        public abstract Task ReceiveAsync(string message);\n\n        public async Task SendAsync(string message)\n        {\n            await this.SendImpl(message);\n            return;\n        }\n    }\n\n    // The MyNetWebSocket embeds application specific websocket logic:\n    // it sends a message back to the client for every message it receives\n    // from the client.\n\n    public class MyNetWebSocket : NetWebSocket\n    {\n        public MyNetWebSocket(Func<object,Task<object>> sendImpl)\n            : base(sendImpl) {}\n\n        public override async Task ReceiveAsync(string message) \n        {\n            Console.WriteLine(message);\n            await this.SendAsync(\"Hello from .NET server on \" + Environment.OSVersion.ToString() + \n                \" at \" + DateTime.Now.ToString());\n            return;\n        }\n    }\n\n    // The Startup class with Invoke method provide the implementation of the\n    // createMyNetWebSocket function. \n\n    public class Startup\n    {\n        public async Task<object> Invoke(Func<object,Task<object>> sendImpl)\n        {\n            var ws = new MyNetWebSocket(sendImpl);\n            return ws.ReceiveImpl;\n        }\n    }\n*/});\n\n// Create an HTTP server that returns an HTML page to the browser client.\n// The JavaScript on the HTML page establishes a WebSocket connection\n// back to the server it came from, and sends a message to the server\n// every second. Messages received from the server are displayed in the\n// browser.\n\nvar server = http.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    res.end((function () {/*\n        <!DOCTYPE html>\n        <html>\n          <body>\n            <script>\n                var ws = new WebSocket('ws://' + window.document.location.host);\n                ws.onmessage = function (event) {\n                    var div = document.createElement('div');\n                    div.appendChild(document.createTextNode(event.data));\n                    document.getElementsByTagName('body')[0].appendChild(div);   \n                };\n                ws.onopen = function () {\n                  setInterval(function () {\n                    ws.send('Hello from client at ' + new Date().toString());\n                  }, 1000);\n                };\n            </script>\n          </body>\n        </html>        \n    */}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1]);\n});\n\n// Create a WebSocket server associated with the HTTP server.\n\nvar wss = new WebSocketServer({ server : server });\n\n// For every new WebSocket connection, create an instance of the\n// WebSocket handler in .NET using the createMyNetWebSocket function.\n// Pass all incoming WebSocket messages to .NET, and allow .NET\n// to send messages back to the client over the connection.\n\nwss.on('connection', function(ws) {\n    var sendImpl = function (message, callback) {\n        ws.send(message);\n        callback();\n    };\n\n    var receiveHandler = createMyNetWebSocket(sendImpl, true);\n\n    ws.on('message', function (message) {\n        receiveHandler(message);\n    });\n});\n\nserver.listen(process.env.PORT || 8080);","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/210_windows_authentication.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge')\n    , http = require('http');\n\nvar authenticate = edge.func(function() {/*\n    using System;\n    using System.Threading.Tasks;\n    using System.Runtime.InteropServices;\n    using System.Security.Principal;\n\n    class Startup\n    {\n\n        [DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\n        public static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword,\n            int dwLogonType, int dwLogonProvider, out IntPtr phToken);\n\n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Auto)]\n        public extern static bool CloseHandle(IntPtr handle);\n\n        public async Task<object> Invoke(dynamic input)\n        {\n            return await Task<object>.Run(() => { \n                IntPtr token;\n                if (!Startup.LogonUser(input.user, null, input.password, 3, 0, out token))\n                {\n                    throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n                }\n\n                try {\n                    using (WindowsIdentity id = new WindowsIdentity(token))\n                    {\n                        return new {\n                            name = id.Name,\n                            sid = id.User.ToString()\n                        };\n                    }\n                }\n                finally {\n                    Startup.CloseHandle(token);\n                }\n            });\n        }\n    }\n*/});\n\nhttp.createServer(function (req, res) {\n    function challange() {\n        res.writeHead(401, { 'WWW-Authenticate': 'Basic realm=\"\"' });\n        res.end();\n    }\n\n    if (req.headers.authorization && req.headers.authorization.indexOf('Basic ') === 0) {\n        var tokens = new Buffer(req.headers.authorization.substring(6), 'base64').toString('utf8').split(':');\n        if (!tokens || tokens.length !== 2  || tokens[0] === 'noone' && tokens[1] === 'noone') {\n            challange();\n        }\n        else {\n            authenticate({ user: tokens[0], password: tokens[1] }, function (error, result) {\n                if (error) {\n                    console.log(error);\n                    challange();\n                }\n                else {\n                    res.writeHead(200, { 'Content-Type': 'text/html' });\n                    res.write('<p>Welcome ' + result.name + ' (' + result.sid + ')');\n                    res.end('<p><a href=\"http://noone:noone@' + req.headers.host + '/\">Logout</a>');\n                }\n            })\n        }\n    }\n    else {\n        challange();\n    }\n}).listen(process.env.PORT || 8080);\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/211_events.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge');\n\nvar subscribe = edge.func(function() {/*\n    async (dynamic input) =>\n    {\n        // Create a timer with the specifed interval. \n        // Conceptually this can be any event source. \n\n        var timer = new System.Timers.Timer(input.interval);\n\n        // Hook up the Elapsed event for the timer and delegate \n        // the call to a Node.js event handler. \n        // Depending on the EventArgs, the data may need to be transformed \n        // if it cannot be directly marshaled by Edge.js.\n\n        timer.Elapsed += (Object source, System.Timers.ElapsedEventArgs e) => {\n            ((Func<object,Task<object>>)input.event_handler)(e).Start();\n        };\n\n        // Start the timer\n        \n        timer.Enabled = true;\n\n        // Return a function that can be used by Node.js to \n        // unsubscribe from the event source.\n\n        return (Func<object,Task<object>>)(async (dynamic data) => {\n            timer.Enabled = false;\n            return null;\n        });\n    }\n*/});\n\nsubscribe({\n    interval: 2000,\n    event_handler: function (data, cb) {\n        console.log('Received event', data);\n        cb();\n    } \n}, function (error, unsubscribe) {\n    if (error) throw error;\n    console.log('Subscribed to .NET events. Unsubscribing in 7 seconds...');\n    setTimeout(function () {\n        unsubscribe(null, function (error) {\n            if (error) throw error;\n            console.log('Unsubscribed from .NET events.');\n            console.log('Waiting 5 seconds before exit to show that no more events are generated...')\n            setTimeout(function () {}, 5000);\n        });\n    }, 7000);\n});\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/samples/301_cspyfsps.js":"// Overview of edge.js: http://tjanczuk.github.com/edge\n\nvar edge = require('../lib/edge')\n\t, async = require('async');\n\nvar helloCs = edge.func(function () {/*\n\tasync (input) => \n\t{ \n\t\treturn \"C# welcomes \" + input.ToString(); \n\t}\n*/});\n\nvar helloPy = edge.func('py', function () {/*\n    def hello(input):\n        return \"Python welcomes \" + input\n\n    lambda x: hello(x)\n*/});\n\nvar helloFs = edge.func('fs', function () {/*\n    fun input -> async { \n        return \"F# welcomes \" + input.ToString()\n    }\n*/});\n\nvar helloPs = edge.func('ps', function () {/*\n\t\"PowerShell welcomes $inputFromJS\"\n*/});\n\nasync.waterfall([\n\tfunction (cb) { cb(null, 'Node.js'); },\n\n\thelloFs,\n\thelloCs,\n\thelloPy,\n\thelloPs\n], function (error, result) {\n\tconsole.log(error || result[0]);\n});","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/tools/checkplatform.js":"try {\n\trequire('../lib/edge.js');\n}\ncatch (e) {\n\tconsole.log('***************************************');\n\tconsole.log(e);\n\tconsole.log('***************************************');\n}\n\nconsole.log('Success: platform check for edge.js: node.js ' + process.arch + ' v' + process.versions.node);\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/tools/download.js":"var http = require('http');\n\nvar urls;\nif (process.argv[2] === 'x86') {\n\turls = [\n\t\t'http://nodejs.org/dist/v' + process.argv[3] + '/node.exe',\n\t\t'http://nodejs.org/dist/v' + process.argv[3] + '/win-x86/node.exe'\n\t];\n}\nelse {\n\turls = [\n\t\t'http://nodejs.org/dist/v' + process.argv[3] + '/x64/node.exe',\n\t\t'http://nodejs.org/dist/v' + process.argv[3] + '/win-x64/node.exe'\n\t];\n}\n\ntry_get(0);\n\nfunction try_get(i) {\n\tconsole.log('Trying download from', urls[i]);\n\thttp.get(urls[i], function (res) {\n\t\tconsole.log('HTTP', res.statusCode);\n\t\tif (res.statusCode !== 200) {\n\t\t\tif (++i === urls.length)\n\t\t\t\tthrow new Error('Unable to download node.exe');\n\t\t\telse\n\t\t\t\ttry_get(i);\n\t\t}\n\n\t\tvar stream = require('fs').createWriteStream(process.argv[4] + '/node.exe');\n\t\tres.pipe(stream);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/tools/install.js":"var fs = require('fs')\n\t, path = require('path')\n\t, spawn = require('child_process').spawn\n\t, whereis = require('./whereis');\n\nif (process.platform === 'win32') {\n\tvar libroot = path.resolve(__dirname, '../lib/native/win32')\n\t\t, lib32bit = path.resolve(libroot, 'ia32')\n\t\t, lib64bit = path.resolve(libroot, 'x64');\n\n\tfunction copyFile(filePath, filename) {\n\t\treturn function(copyToDir) {\n\t\t\tfs.writeFileSync(path.resolve(copyToDir, filename), fs.readFileSync(filePath));\n\t\t};\n\t}\n\n\tfunction isDirectory(info) {\n\t\treturn info.isDirectory;\n\t}\n\n\tfunction getInfo(basedir) {\n\t\treturn function(file) {\n\t\t\tvar filepath = path.resolve(basedir, file);\n\n\t\t\treturn {\n\t\t\t\tpath: filepath,\n\t\t\t\tisDirectory: fs.statSync(filepath).isDirectory()\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction getPath(info) {\n\t\treturn info.path;\n\t}\n\n\tvar dest32dirs = fs.readdirSync(lib32bit)\n\t\t.map(getInfo(lib32bit))\n\t\t.filter(isDirectory)\n\t\t.map(getPath);\n\n\t['msvcr120.dll', 'msvcp120.dll'].forEach(function (dllname) {\n\t\tvar dll32bit = path.resolve(lib32bit, dllname);\n\t\tdest32dirs.forEach(copyFile(dll32bit, dllname));\n\t});\n\t\t\n\tvar dest64dirs = fs.readdirSync(lib64bit)\n\t\t.map(getInfo(lib64bit))\n\t\t.filter(isDirectory)\n\t\t.map(getPath);\n\n\t['msvcr120.dll', 'msvcp120.dll'].forEach(function (dllname) {\n\t\tvar dll64bit = path.resolve(lib64bit, dllname);\n\t\tdest64dirs.forEach(copyFile(dll64bit, dllname));\n\t});\n\n\tvar dotnetPath = whereis('dotnet', 'dotnet.exe');\n\n\tif (dotnetPath) {\n\t\tspawn(dotnetPath, ['restore'], { stdio: 'inherit', cwd: path.resolve(__dirname, '..', 'lib', 'bootstrap') })\n\t\t\t.on('close', function() {\n\t\t\t\tspawn(dotnetPath, ['build', '--configuration', 'Release'], { stdio: 'inherit', cwd: path.resolve(__dirname, '..', 'lib', 'bootstrap') })\n\t\t\t\t\t.on('close', function() {\n\t\t\t\t\t\trequire('./checkplatform');\n\t\t\t\t\t});\n\t\t\t});\n\t}\n\n\telse {\n\t\trequire('./checkplatform');\n\t}\n} \n\nelse {\n\tspawn('node-gyp', ['configure', 'build'], { stdio: 'inherit' });\n}\n","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/tools/whereis.js":"var fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function() {\n    var pathSep = process.platform === 'win32' ? ';' : ':';\n\n    var directories = process.env.PATH.split(pathSep);\n\n    for (var i = 0; i < directories.length; i++) {\n    \tfor (var j = 0; j < arguments.length; j++) {\n    \t\tvar filename = arguments[j];\n\t        var filePath = path.join(directories[i], filename);\n\n\t        if (fs.existsSync(filePath)) {\n\t            return filePath;\n\t        }\n\t    }\n    }\n\n    return null;\n}","/home/travis/build/npmtest/node-npmtest-edge/node_modules/edge/tools/runJsHint.js":"var fs = require('fs');\nvar jshint = require('jshint').JSHINT;\n\nvar foldersToLint = [\n\t'./lib',\n\t'./test'\n];\n\nvar utils = {\n\terrors: 0,\n\n\treadFile: function (filename) {\n\t\treturn fs.readFileSync(filename, 'utf8');\n\t},\n\n\tlintFile: function (filename, config) {\n\t\tvar results = jshint(this.readFile(filename), config.options, config.globals);\n\t\tif (!results) {\n\t\t\tthis.errors++;\n\t\t\tthis.renderResults(filename);\n\t\t}\n\t},\n\n\tresolveFiles: function(folders) {\n\t\tvar files = [];\n\t\tfolders.forEach(function (dir) {\n\t\t\tvar filesInFolder = fs.readdirSync(dir);\n\t\t\tvar jsFiles = filesInFolder.filter(function (file) {\n\t\t\t\treturn file.indexOf('.js') > 0;\n\t\t\t}).map(function (js) {\n\t\t\t\treturn dir + '/' + js;\n\t\t\t});\n\n\t\t\tfiles = files.concat(jsFiles);\n\t\t});\n\n\t\treturn files;\n\t},\n\n\trenderResults: function (filename) {\n\t\tjshint.errors.forEach(function (e) {\n\t\t\tif (!e) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.error(filename + ': ' + e.code + ' ' + e.raw + ' at line: ' + e.line + ' character: ' + e.character);\n\t\t});\n\t}\n};\n\nvar config = JSON.parse(utils.readFile('.jshintrc'));\nvar filesToLint = utils.resolveFiles(foldersToLint);\n\nfilesToLint.forEach(function (filename) {\n\tutils.lintFile(filename, config);\n});\n\nif (utils.errors > 0) {\n\treturn process.exit(1);\n}\n\nconsole.log('Success: no linting errors.');"}